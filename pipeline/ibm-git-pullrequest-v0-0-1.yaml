apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  annotations:
    app.openshift.io/description: >-
      Publishes pull request with helm chart configuration to the provided
      gitops repo to trigger downstream deployments
    app.openshift.io/vcs-ref: master
    app.openshift.io/vcs-uri: 'https://github.com/IBM/ibm-garage-tekton-tasks'
    description: >-
      Publishes pull request with helm chart configuration to the provided
      gitops repo to trigger downstream deployments
  name: ibm-git-pullrequest-v0-0-1
  labels:
    version: 0.0.1
spec:
  params:
    - default: ''
      name: app-name
      type: string
    - default: ''
      name: version
      type: string
    - default: /source
      name: source-dir
      type: string
    - default: ''
      name: subdir
      type: string
    - default: 'ibmgaragecloud/ibmcloud-dev:1.2.2'
      name: tools-image
      type: string
    - default: ''
      name: target-branch
      type: string
  stepTemplate:
    name: ''
    resources: {}
    volumeMounts:
      - mountPath: $(params.source-dir)
        name: source
  steps:
    - env:
        - name: HOME
          value: /home/devops
        - name: GIT_USERNAME
          valueFrom:
            secretKeyRef:
              key: username
              name: git-credentials
              optional: true
        - name: GIT_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: git-credentials
              optional: true
        - name: GIT_USERNAME_CD
          valueFrom:
            secretKeyRef:
              key: username
              name: gitops-cd-secret
              optional: true
        - name: GIT_PASSWORD_CD
          valueFrom:
            secretKeyRef:
              key: password
              name: gitops-cd-secret
              optional: true
        - name: GIT_HOST
          valueFrom:
            configMapKeyRef:
              key: host
              name: gitops-repo
              optional: true
        - name: GIT_ORG
          valueFrom:
            configMapKeyRef:
              key: org
              name: gitops-repo
              optional: true
        - name: GIT_REPO
          valueFrom:
            configMapKeyRef:
              key: repo
              name: gitops-repo
              optional: true
        - name: GIT_BRANCH
          valueFrom:
            configMapKeyRef:
              key: branch-test
              name: gitops-repo
              optional: true
      image: $(params.tools-image)
      name: gitops
      resources: {}
      script: >
        #!/usr/bin/env bash

        set -ex


        APP_NAME="$(params.app-name)"

        SUBDIR="$(params.subdir)"



        if [[ -z "${SUBDIR}" ]]; then
          SUBDIR="$(params.app-name)"
        fi

        if [[ -z "${GIT_HOST}" ]] || [[ -z "${GIT_ORG}" ]] || [[ -z
        "${GIT_REPO}" ]]; then
            echo "GitOps repo has not been configured with confimap gitops-repo. Skipping trigger step"
            exit 0
        fi


        set +x

        if [[ -n "${GIT_USERNAME_CD}" ]]; then
          GIT_AUTH_USER="${GIT_USERNAME_CD}"
          GIT_AUTH_PWD="${GIT_PASSWORD_CD}"
        elif [[ -n "${GIT_USERNAME}" ]]; then
          GIT_AUTH_USER="${GIT_USERNAME}"
          GIT_AUTH_PWD="${GIT_PASSWORD}"
        else
          echo "Credentials for GitOps repo not set in secret gitops-cd-secret or git-credentials"
          exit 1
        fi

        set -x


        BRANCH_CMD=""

        if [[ -n "${GIT_BRANCH}" ]]; then
          BRANCH_CMD="-b ${GIT_BRANCH}"
        fi

        git config --global user.email "gitops@cloudnativetoolkit.dev"

        git config --global user.name "Cloud Native Toolkit Pipeline"

        echo "git clone ${BRANCH_CMD}
        https://${GIT_AUTH_USER}:xxxx@${GIT_HOST}/${GIT_ORG}/${GIT_REPO}"

        set +x

        GIT_URL="https://${GIT_AUTH_USER}:${GIT_AUTH_PWD}@${GIT_HOST}/${GIT_ORG}/${GIT_REPO}"

        git clone ${BRANCH_CMD} ${GIT_URL} gitops_cd

        set -x

        cd gitops_cd

        if [[ -z "${VERSION}" ]]; then
          VERSION=$(git rev-parse --short HEAD)
        fi

        TARGET_BRANCH="$(params.target-branch)-${VERSION}"

        echo "TARGET_BRANCH = ${TARGET_BRANCH}"


        git checkout -b ${TARGET_BRANCH} ${GIT_BRANCH}

        git push origin ${TARGET_BRANCH}

        echo "--------------------------"

        echo "Pushed the ${TARGET_BRANCH} branch!"

        echo "--------------------------"

        sleep 10

        TITLE="GitOps update for version ${VERSION}"

        BODY="GitOps update for version ${VERSION}"
        API_GIT_URL=https://api.github.com/repos/${GIT_ORG}/${GIT_REPO}/pulls

        curl -u "${GIT_AUTH_USER}:${GIT_AUTH_PWD}" -d '{"title":
        "'"$TITLE"'","body": "'"$BODY"'","head": "'"${TARGET_BRANCH}"'","base":
        "'"$(params.target-branch)"'"}' -H 'Content-Type: application/json'
        ${API_GIT_URL}
      workingDir: $(params.source-dir)
  volumes:
    - emptyDir: {}
      name: source
